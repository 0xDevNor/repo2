class Raindrop {
    constructor(canvas, grid, imageBrightnessData) {
        this.canvas = canvas;
        this.grid = grid;
        this.imageBrightnessData = imageBrightnessData;
        this.resetRaindrop();
        this.ctx = canvas.getContext('2d');
    }

    resetRaindrop() {
        this.x = Math.random() * this.canvas.width;
        this.y = 0;
        this.speed = 0;
        this.velocity = Math.random() * 5 + 1;
        this.size = Math.random() * 2 + 1;
        this.color = `hsl(${Math.random() * 360}, 100%, 50%)`; // Adds a hue color effect
    }

    update() {
        this.y += this.speed + this.velocity;
        if (this.y > this.canvas.height) {
            this.resetRaindrop();
        }
    }

    draw() {
        let yIndex = Math.floor(this.y);
        let xIndex = Math.floor(this.x);
        let brightness = 1; // Default brightness for rain outside the image
        let outsideColor = 'rgba(139, 0, 0, 0.6)'; // Dark red color for rain outside the image
        let insideColor = 'rgba(0, 255, 0, 0.6)'; // Default green color for rain inside the image

        // Check if the raindrop is within the image bounds
        if (yIndex >= 0 && yIndex < this.canvas.height && xIndex >= 0 && xIndex < this.canvas.width) {
            brightness = this.imageBrightnessData[yIndex * this.canvas.width + xIndex]; // Get brightness value from image
            // Adjust the color based on brightness. Brighter areas get lighter rain.
            let adjustedBlue = Math.floor(255 - (brightness * 255)); // Calculate blue value based on image brightness
            insideColor = `rgba(255, 0, 0, ${brightness})`; // Adjusts the alpha based on brightness for a dynamic effect
        }

        this.ctx.beginPath();
        // Use dynamic color if the raindrop is within the image bounds, otherwise use outsideColor
        this.ctx.fillStyle = (brightness === 1) ? outsideColor : this.color; // Uses the hue color effect
        this.ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        this.ctx.fill();
    }
}

function createImageBrightnessData(imageData) {
    const brightnessData = new Uint8ClampedArray(imageData.width * imageData.height);
    for (let y = 0; y < imageData.height; y++) {
        for (let x = 0; x < imageData.width; x++) {
            const index = (y * imageData.width + x) * 4;
            const red = imageData.data[index];
            const green = imageData.data[index + 1];
            const blue = imageData.data[index + 2];
            const brightness = (0.299 * red + 0.587 * green + 0.114 * blue) / 255;
            brightnessData[y * imageData.width + x] = brightness;
        }
    }
    return brightnessData;
}

function startRainEffect(canvas, imageBrightnessData) {
    let raindrops = [];
    for (let i = 0; i < 10000; i++) {
        raindrops.push(new Raindrop(canvas, null, imageBrightnessData));
    }

    function animate() {
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)'; // Adds a fading effect to the canvas
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        for (let raindrop of raindrops) {
            raindrop.update();
            raindrop.draw();
        }

        requestAnimationFrame(animate);
    }

    animate();
}

function initializeCanvasWithImage(canvas, imageSrc) {
    const image = new Image();
    image.src = imageSrc;

    image.addEventListener('load', function () {
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const imageBrightnessData = createImageBrightnessData(imageData);

        startRainEffect(canvas, imageBrightnessData);
    });

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        image.addEventListener('load', function () {
            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
        });
    });
}

document.addEventListener('DOMContentLoaded', function () {
    const canvas = document.getElementById('animationCanvas');
    const images = ['salad.png', 'skull.png', 'cat.png', 'bicycle.png', 'ape.png']; // Array of images to choose from
    const randomImage = images[Math.floor(Math.random() * images.length)]; // Selects a random image
    initializeCanvasWithImage(canvas, randomImage); // Uses the randomly selected image
});
